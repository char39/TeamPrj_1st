팀으로 했을 때와 개인으로 했을 때의 차이점
    코드 최적화와 특정 스킬을 썼을 때 차이점 경험을 공유
    서로 한 것을 씬 합치기 또는 분기합치기를 했을 때의 경험을 공유

#개인장점
- 변수명이나 메서드명 등 세부적인 코드 작성 방식에 있어서도 자신의 기준과 스타일에 따라 자유롭게 설정
#개인단점
- 객관적인 피드백을 즉각적으로 얻기 어려워 현재 방향이 올바른지 혹은 개선이 필요한지를 판단하는 데 어려움이 있음
- 스스로에 대한 동기 부여와 일정 관리가 어려워짐
- 기술적 한계





ppt

1. 소개
    팀원 소개
    ;포트폴리오 목표

2. 프로젝트 개요
    게임 제목
        AngryBirdSpace
    특징
        퍼즐 비디오 게임, 슈팅 게임, 캐주얼 게임 (액션, 퍼즐 게임)
        
    개발 기간
        2024.09.13 ~ 2024.10.25

3. 게임 컨셉
    게임 제목 및 원작 소개
        원작 게임의 제목과 간단한 설명
            제목: AngryBirdSpace
            설명: 우주를 배경으로 한 새를 날려 돼지를 터트리는 액션 게임
    모작의 목적
        왜 이 게임을 선택했는가 (기술적 도전, 디자인적 영감 등 선택하게 된 이유)
            독특한 게임 플레이 요소인 원형 중력장이 인상 깊었음
            일반적인 2D 물리 엔진을 넘어, 중력장이 추가된 공간 속에서 오브젝트의 움직임이 매력적으로 다가와
            다양한 중력 조건에서 오브젝트의 움직임을 구현하고 싶어서 선택함
        추가하고 싶은 새로운 요소나 변경 사항
            가능하다면 블랙홀, 화이트홀 등 다양한 중력장을 추가하고 싶음

4. 개발 과정
    사용한 기술 스택 (엔진, 프로그래밍 언어 등)
        유니티 엔진, C#, Visual Studio Code
    각 팀원의 역할 및 기여도
        박성순: 60% (중력, 새, 관리클래스 등 주요 기능 구현)
        유안나: 40% (카메라, UI, 사운드, 레벨 관리 등 주요 기능 구현)
    개발 과정에서의 도전과 해결 방법
        #팀 장점
        다양한 아이디어 수용
        : 함께 아이디어를 모아 창의적인 결과물 만들어냄

        역할 분담과 효율성
        : 각자 역할을 나누어 맡음으로써 효율적으로 작업을 진행
        작업 속도도 빨라짐
        특히, 자신이 잘하는 분야에 집중할 수 있어 전문성을 높일 수 있습니다.

        문제 해결력 향상
        : 팀원들 간 의견 교환을 통해 문제를 여러 시각에서 접근할 수 있게 되며, 각자의 경험과 지식을 공유함으로써 문제를 더 효과적으로 해결

        책임감과 협동심
        : 서로의 역할과 책임을 나누고 협력함으로써 프로젝트에 대한 책임감을 가지게 되며, 협동심도 기를 수 있습니다.

        의사소통 능력 발전
        : 서로의 의견을 조율하고 합의하는 과정을 통해 자연스럽게 의사소통 능력이 향상
        
        #팀 단점
        의견 충돌
        : 개개인이 선호하는 스타일이 달라 사소한 의견 충돌 발생
            해결/ 서로의 스타일을 존중하여 각자 의견을 수용하고 적절히 조율
            해결/ 내 의견이 맞다 우기기. 내 나이가 더 많다고 윽박질러 기 죽이기

        객관적 피드백 부족
        : 두 사람만으로 피드백을 주고받다 보면 서로의 의견이 제한적이어서 보다 객관적인 평가를 놓치기 쉽습니다.

        의사소통의 부담
        : 두 명 모두의 참여가 중요한 만큼, 지속적으로 소통하며 진행 상황을 조율하는 데 시간이 더 필요할 수 있습니다.
        
        #씬 합치기
        Live share 및 병합하면서 씬합침

5. 주요 기능 설명
    기능 개요
        구현한 주요 기능 리스트 (아래에 작성해둠 이따 참조)
    기능별 코드 설명
        리스트 내용 (아래에 작성해둠 이따 참조)
    기술적 도전
        각 기능을 구현하면서 겪었던 문제와 해결 방법
        AnglePush 포기 -> 박파일럿한테 물어보기
        SetStarRating curScore 쓰기 -> 왜이렇게 썼냐고 박파일럿이 뭐라해서 이해시켜주기;;;;;
        점수 저장, 별 저장(one, two, three 배열 class ) 어케하는지 고민에 빠짐 -> Dictionary 사용

        코드 최적화 또는 성능 개선 사례
    결과 및 피드백
        구현된 기능이 게임에 미친 영향
        개선사항? 등

6. 결론
    프로젝트에서 배운 점
    향후 계획 (개선 사항 및 추가 개발)

7. 질의응답
    발표에 대한 질문 및 답변









현재 ppt에 있는 슬라이드 당 요약

제목
목차
원작 소개
규칙 및 플레이 방식
개발 기간
사용한 기술 스택

코드 설명 시작
    technology stack ___ Gravity                            CircularGravityField.cs
    technology stack ___ Gravity Editor                     GravityFieldRadiusMatch.cs
    technology stack ___ Gravity Receiver
    technology stack ___ IceStone Editor                    IceStoneLocalScaleMatch.cs
    technology stack ___ IceStone                           IceStone.cs
    technology stack ___ IceStone                           StoneSelect 상속
    technology stack ___ ColliderDetection                  ColliderDetection.cs
    technology stack ___ Bird                               Bird.cs
    technology stack ___ BlueBird                           Bird 상속
    technology stack ___ YellowBird                         Bird 상속
    technology stack ___ BirdDestroyTime
    technology stack ___ AnglePush
    technology stack ___ Bubble                             ColliderDetection 상속
    technology stack ___ BubblePigMoveCircle
    technology stack ___ BubblePigMoveCircleRebound
    technology stack ___ Pig                                ColliderDetection 상속
    technology stack ___ Slingshot                          slingshot.cs
    technology stack ___ Blocks                             ColliderDetection 상속
    technology stack ___ Stone · Wood · Glass Blocks        Blocks 상속
    technology stack ___ Grass                              ColliderDetection 상속
    technology stack ___ Camera                             CameraFollowBird.cs
    technology stack ___ Camera                             MoveCameraByDrag.cs
    technology stack ___ SceneList                          SceneList.cs
    technology stack ___ LevelRoomSize · LevelData          LevelRoomSize.cs
    technology stack ___ LevelDataList                      LevelRoomSize.cs
    technology stack ___ GameManage                         GameMange.cs
    technology stack ___ UIManage                           UIManage.cs
    technology stack ___ UIManage Button Event              UIManage.Public.cs
    technology stack ___ SceneManage                        SceneManage.LoadScene.cs
    technology stack ___ LevelManage                        LevelManage.cs
    technology stack ___ ScoreManage                        ScoreManage.cs
    technology stack ___ SoundManage                        SoundManage.cs
    




코드 설명 리스트

    LevelDataList.cs        ; 레벨 데이터를 Dictionary로 관리하는 정적 클래스
    - LevelData.cs          ; 각 레벨의 데이터를 저장하는 클래스
    - LevelRoomSize.cs      ; 각 레벨에서 카메라 이동 범위를 저장하는 클래스
    SceneList.cs            ; 씬의 이름을 상수로 관리하는 정적 클래스

    GameManage.cs           ; 게임의 전반적인 기능을 관리하는 클래스
    - SoundManage.cs        ; Sound 관련 총괄
    - LevelManage.cs        ; Level Clear 판정 등 담당
    - UIManage.cs           ; UI 관련 총괄
    - SceneManage.cs        ; Scene 총괄. 씬 전환, 씬 로드 등을 담당
    
    Sprites.cs              ; 게임에 사용되는 스프라이트 이미지를 관리하는 클래스
    BirdPrefs.cs            ; Resources 폴더에 있는 새의 프리팹을 불러오는 클래스

    CameraFollowBird.cs     ; 새를 따라다니는 카메라를 구현하는 클래스
    MoveCameraByDrag.cs     ; 드래그로 카메라를 이동시키는 클래스

    ColliderDetection.cs    ; 새 이외의 충돌을 감지하는 기본 클래스
    - Blocks.cs             ; 블록의 충돌을 감지하는 기본 클래스. (ColliderDetection을 상속받음)
    - - StoneBlock.cs       ; 돌 블록의 충돌을 감지하는 클래스. (Blocks를 상속받음)
    - - WoodBlock.cs        ; 나무 블록의 충돌을 감지하는 클래스. (Blocks를 상속받음)

    Slingshot.cs            ; 슬링샷을 구현하는 클래스

    Bird.cs                 ; 새의 기본 클래스
    - Bird_Blue.cs          ; 파란 새의 클래스. (Bird를 상속받음)
    - Bird_Yellow.cs        ; 노란 새의 클래스. (Bird를 상속받음)

    IGraivtyField.cs            ; 중력장을 구현하는 인터페이스
    - GravityField.cs           ; 중력장을 구현하는 기본 클래스. (IGravityField를 상속받음)
    - - CircularGravityField.cs ; 원형 중력장을 구현하는 클래스. (GravityField를 상속받음)
    - - - GravityTarget.cs          ; 중력을 받는 오브젝트를 설정하는 클래스
    - - - GravityFriction.cs        ; 중력을 받는 오브젝트의 마찰력을 설정하는 클래스

    GravityFieldRadius.cs               ; 중력장의 반지름을 설정하는 클래스
    GravityFieldRadiusMatch.cs (Editor) ; 중력장의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스.
    SurfaceRadius.cs                    ; 행성의 반지름을 설정하는 클래스
    SurfaceRadiusMatch.cs (Editor)      ; 행성의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스.


시스템 관리:
- 관리 클래스
- 레벨 데이터
- 씬 관리
- 리소스 관리

게임 플레이와 기능 구현:
- 카메라 움직임
- 충돌 감지
- 발사대 및 새
- 중력장
- 중력장 및 행성 반지름 설정













관리 클래스:
- GameManage.cs     ; 게임의 전반적인 제어 및 모든 관리 클래스의 관리를 담당합니다.
- SceneManage.cs    ; Scene 관련 총괄.        씬 전환, 씬 로드 등을 담당합니다.
- UIManage.cs       ; UI 관련 총괄.           UI의 모든 기능을 담당합니다.
- SoundManage.cs    ; Sound 관련 총괄.        Sound의 모든 기능을 담당합니다.
- LevelManage.cs    ; Level Data 관련 총괄.   클리어 판정, 점수 관련 기능을 담당합니다.

레벨 데이터 관리:
- LevelDataList.cs  ; 아래 모든 레벨 데이터들을 Dictionary로 관리합니다.
- LevelData.cs      ; 각 레벨의 데이터를 저장하는 클래스입니다.
- LevelRoomSize.cs  ; 각 레벨의 카메라 이동 제한 범위를 저장하는 클래스입니다.

씬 관리:
- SceneList.cs      ; 씬의 이름을 상수로 관리합니다.

리소스 관리:
- Sprites.cs        ; 게임에 사용되는 스프라이트 이미지를 미리 불러와 관리합니다.
- BirdPrefs.cs      ; 게임에 사용되는 새 프리팹을 미리 불러옵니다.

카메라 움직임 담당:
- CameraFollowBird.cs   ; 카메라가 새를 따라다니는 기능을 담당합니다.
- MoveCameraByDrag.cs   ; 드래그로 카메라를 이동시키는 기능을 담당합니다.

충돌 감지를 담당:
- ColliderDetection.cs  ; 새 이외의 충돌을 감지하는 기본 클래스입니다. (부모 클래스)
- Blocks.cs             ; 블록의 충돌을 감지하는 기본 클래스입니다. (ColliderDetection을 상속받습니다.)
- StoneBlock.cs         ; 돌 블록의 충돌을 감지하는 클래스입니다. (Blocks를 상속받습니다.)
- WoodBlock.cs          ; 나무 블록의 충돌을 감지하는 클래스입니다. (Blocks를 상속받습니다.)

발사대 및 새 담당:
- Slingshot.cs      ; 새를 발사하는 기능을 담당합니다.
- Bird.cs           ; 새의 기본 클래스입니다.
- Bird_Blue.cs      ; 파란 새를 구현합니다. (Bird를 상속받습니다.)
- Bird_Yellow.cs    ; 노란 새를 구현합니다. (Bird를 상속받습니다.)

중력장 담당:
- IGraivtyField.cs          ; 중력장을 구현하는 인터페이스입니다.
- GravityField.cs           ; 중력장을 구현하는 기본 클래스입니다. (IGravityField를 상속받습니다.)
- CircularGravityField.cs   ; 원형 중력장을 구현하는 클래스입니다. (GravityField를 상속받습니다.)
- GravityTarget.cs          ; 중력을 적용할 오브젝트의 설정을 담당합니다.
- GravityFriction.cs        ; 중력을 받는 오브젝트의 마찰력을 설정하는 클래스입니다.

중력장 및 행성 반지름 설정 담당:
- GravityFieldRadius.cs                 ; 중력장의 반지름을 설정하는 클래스입니다.
- GravityFieldRadiusMatch.cs (Editor)   ; 중력장의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스입니다.
- SurfaceRadius.cs                      ; 행성의 반지름을 설정하는 클래스입니다.
- SurfaceRadiusMatch.cs (Editor)        ; 행성의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스입니다.