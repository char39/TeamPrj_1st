팀으로 했을 때와 개인으로 했을 때의 차이점
    코드 최적화와 특정 스킬을 썼을 때 차이점 경험을 공유
    서로 한 것을 씬 합치기 또는 분기합치기를 했을 때의 경험을 공유

#개인장점
- 변수명이나 메서드명 등 세부적인 코드 작성 방식에 있어서도 자신의 기준과 스타일에 따라 자유롭게 설정
#개인단점
- 객관적인 피드백을 즉각적으로 얻기 어려워 현재 방향이 올바른지 혹은 개선이 필요한지를 판단하는 데 어려움이 있음
- 스스로에 대한 동기 부여와 일정 관리가 어려워짐
- 기술적 한계





ppt

1. 소개
    팀원 소개
    ;포트폴리오 목표

2. 프로젝트 개요
    게임 제목
        AngryBirdSpace
    특징
        퍼즐 비디오 게임, 슈팅 게임, 캐주얼 게임 (액션, 퍼즐 게임)
        
    개발 기간
        2024.09.13 ~ 2024.10.25

3. 게임 컨셉
    게임 제목 및 원작 소개
        원작 게임의 제목과 간단한 설명
            제목: AngryBirdSpace
            설명: 우주를 배경으로 한 새를 날려 돼지를 터트리는 액션 게임
    모작의 목적
        왜 이 게임을 선택했는가 (기술적 도전, 디자인적 영감 등 선택하게 된 이유)
            독특한 게임 플레이 요소인 원형 중력장이 인상 깊었음
            일반적인 2D 물리 엔진을 넘어, 중력장이 추가된 공간 속에서 오브젝트의 움직임이 매력적으로 다가와
            다양한 중력 조건에서 오브젝트의 움직임을 구현하고 싶어서 선택함
        추가하고 싶은 새로운 요소나 변경 사항
            가능하다면 블랙홀, 화이트홀 등 다양한 중력장을 추가하고 싶음

4. 개발 과정
    사용한 기술 스택 (엔진, 프로그래밍 언어 등)
        유니티 엔진, C#, Visual Studio Code
    각 팀원의 역할 및 기여도
        박성순: 60% (중력, 새, 관리클래스 등 주요 기능 구현)
        유안나: 40% (카메라, UI, 사운드, 레벨 관리 등 주요 기능 구현)
    개발 과정에서의 도전과 해결 방법
        #팀 장점
        다양한 아이디어 수용
        : 함께 아이디어를 모아 창의적인 결과물 만들어냄

        역할 분담과 효율성
        : 각자 역할을 나누어 맡음으로써 효율적으로 작업을 진행
        작업 속도도 빨라짐
        특히, 자신이 잘하는 분야에 집중할 수 있어 전문성을 높일 수 있습니다.

        문제 해결력 향상
        : 팀원들 간 의견 교환을 통해 문제를 여러 시각에서 접근할 수 있게 되며, 각자의 경험과 지식을 공유함으로써 문제를 더 효과적으로 해결

        책임감과 협동심
        : 서로의 역할과 책임을 나누고 협력함으로써 프로젝트에 대한 책임감을 가지게 되며, 협동심도 기를 수 있습니다.

        의사소통 능력 발전
        : 서로의 의견을 조율하고 합의하는 과정을 통해 자연스럽게 의사소통 능력이 향상
        
        #팀 단점
        의견 충돌
        : 개개인이 선호하는 스타일이 달라 사소한 의견 충돌 발생
            해결/ 서로의 스타일을 존중하여 각자 의견을 수용하고 적절히 조율
            해결/ 내 의견이 맞다 우기기. 내 나이가 더 많다고 윽박질러 기 죽이기

        객관적 피드백 부족
        : 두 사람만으로 피드백을 주고받다 보면 서로의 의견이 제한적이어서 보다 객관적인 평가를 놓치기 쉽습니다.

        의사소통의 부담
        : 두 명 모두의 참여가 중요한 만큼, 지속적으로 소통하며 진행 상황을 조율하는 데 시간이 더 필요할 수 있습니다.
        
        #씬 합치기
        Live share 및 병합하면서 씬합침

5. 주요 기능 설명
    기능 개요
        구현한 주요 기능 리스트 (아래에 작성해둠 이따 참조)
    기능별 코드 설명
        리스트 내용 (아래에 작성해둠 이따 참조)
    기술적 도전
        각 기능을 구현하면서 겪었던 문제와 해결 방법
        AnglePush 포기 -> 박파일럿한테 물어보기
        SetStarRating curScore 쓰기 -> 왜이렇게 썼냐고 박파일럿이 뭐라해서 이해시켜주기;;;;;
        점수 저장, 별 저장(one, two, three 배열 class ) 어케하는지 고민에 빠짐 -> Dictionary 사용
        코드 최적화 또는 성능 개선 사례

        예시
        
        기술적 도전
            중력 적용 방식 변경
                문제:
                    기존 코드는 중력을 제공하는 개체가 Collider로 중력을 받는 개체들을 판단하여 중력의 힘을 전달하고, 중력을 받는 개체에서 velocity를 제어하는 방식이었습니다.
                    이로 인해 중력을 받는 개체가 여러 개일 때, 중력을 받는 개체들을 전부 판단하지 못하는 문제와
                    여러 물리연산을 무시하고 velocity를 직접 제어하니 중력을 받는 개체들이 서로 영향을 주는 문제가 발생했습니다.
                    또한 중력을 받는 개체들의 클래스 각각 코드가 작성되어 있어, 중력 관련 코드를 수정할 때마다 모든 클래스를 수정해야 하는 문제가 있었습니다.
                해결 방법:
                    중력을 제공하는 개체에서 중력을 받는 모든 개체들을 찾고, 반경 내에 있는 개체들에게 중력을 제공하도록 수정,
                    각 개체들의 velocity를 직접 제어하지 않고, AddForce를 사용하여 물리엔진의 일관성을 유지하도록 수정하였습니다.
                    또한, 중력을 제공하는 클래스와, 중력만 제공받는 클래스를 생성하여 유지보수가 용이하도록 수정하였습니다.
                구체적 예시:
                    중력을 받는 개체에 GravityTarget 컴포넌트를 추가하면 중력을 받는 개체로 인식하도록 하였습니다.
                    중력 계산이 보다 정확해지고, 이동 궤적이 보다 자연스러워졌습니다.

        결과 및 피드백
            성과 및 개선 사항
            팀원 간 피드백



    결과 및 피드백
        구현된 기능이 게임에 미친 영향
        개선사항? 등

6. 결론
    프로젝트에서 배운 점
    향후 계획 (개선 사항 및 추가 개발)

    팀워크의 중요성
        (슬라이드에 들어갈 요약 문장)
        [팀원과 의견을 공유하고 아이디어를 조율하며 문제를 해결하는 과정에서 팀워크의 중요성을 배웠습니다.]
        Angry Bird Space를 만들며 팀원들과 아이디어를 나누고 의견을 조율하는 과정에서의 팀워크의 중요성을 깊이 느꼈습니다.
        문제 상황이 발생했을 때 서로 도우며 해결하는 과정에서 큰 성장을 경험할 수 있었습니다.
        ; 예를 들어, 캐릭터의 움직임이나 물리적 요소를 구현할 때 각자의 아이디어를 공유하고 최적의 방법을 찾아가는 과정을 통해 협업의 가치와 중요성을 배웠습니다.

    개발 과정에서의 배움
        (슬라이드에 들어갈 요약 문장)
        [캐릭터 움직임과 물리 계산 등 다양한 요소를 다루며 게임 개발 전반에 대한 이해도가 높아졌습니다.]
        Angry Bird Space는 생각보다 다양한 요소를 요구하는 게임이었습니다.
        캐릭터의 움직임, 물리 계산 등 여러 요소를 직접 다루면서 게임 개발에 대한 이해도가 높아졌습니다.
        각 기능을 구현하며 게임 속 물리 엔진과 상호작용을 이해하게 되었고, 이러한 경험이 개발 실력을 향상시키는 데 큰 도움이 되었습니다.
    
    문제 해결 능력 향상
        (슬라이드에 들어갈 요약 문장)
        [게임 개발 중 예상치 못한 오류와 여러 난관을 해결하며 문제 해결 능력을 키울 수 있었습니다.]
        개발 중 예상치 못한 오류나 기술적 난관을 여러 번 겪었습니다.
        예를 들어, 블록에 맞은 힘을 기반으로 스프라이트를 업데이트하고 점수를 올리는 기능을 구현하는 과정에서 여러 어려움이 있었는데,
        이를 해결하기 위해 문제를 분석하고 다양한 방법을 시도하면서 문제 해결 능력을 키울 수 있었습니다.


    





7. 질의응답
    발표에 대한 질문 및 답변









현재 ppt에 있는 슬라이드 당 요약

제목
목차
원작 소개
규칙 및 플레이 방식
개발 기간
사용한 기술 스택

코드 설명 시작
    technology stack ___ Gravity                            CircularGravityField.cs
    technology stack ___ Gravity Editor                     GravityFieldRadiusMatch.cs
    technology stack ___ Gravity Receiver
    technology stack ___ IceStone Editor                    IceStoneLocalScaleMatch.cs
    technology stack ___ IceStone                           IceStone.cs
    technology stack ___ IceStone                           StoneSelect 상속
    technology stack ___ ColliderDetection                  ColliderDetection.cs
    technology stack ___ Bird                               Bird.cs
    technology stack ___ BlueBird                           Bird 상속
    technology stack ___ YellowBird                         Bird 상속
    technology stack ___ BirdDestroyTime
    technology stack ___ AnglePush
    technology stack ___ Bubble                             ColliderDetection 상속
    technology stack ___ BubblePigMoveCircle
    technology stack ___ BubblePigMoveCircleRebound
    technology stack ___ Pig                                ColliderDetection 상속
    technology stack ___ Slingshot                          slingshot.cs
    technology stack ___ Blocks                             ColliderDetection 상속
    technology stack ___ Stone · Wood · Glass Blocks        Blocks 상속
    technology stack ___ Grass                              ColliderDetection 상속
    technology stack ___ Camera                             CameraFollowBird.cs
    technology stack ___ Camera                             MoveCameraByDrag.cs
    technology stack ___ SceneList                          SceneList.cs
    technology stack ___ LevelRoomSize · LevelData          LevelRoomSize.cs
    technology stack ___ LevelDataList                      LevelRoomSize.cs
    technology stack ___ GameManage                         GameMange.cs
    technology stack ___ UIManage                           UIManage.cs
    technology stack ___ UIManage Button Event              UIManage.Public.cs
    technology stack ___ SceneManage                        SceneManage.LoadScene.cs
    technology stack ___ LevelManage                        LevelManage.cs
    technology stack ___ ScoreManage                        ScoreManage.cs
    technology stack ___ SoundManage                        SoundManage.cs

기존
    관리 클래스:
    - GameManage.cs     ; 게임의 전반적인 제어 및 모든 관리 클래스의 관리를 담당합니다.
    - SceneManage.cs    ; Scene 관련 총괄.        씬 전환, 씬 로드 등을 담당합니다.
    - UIManage.cs       ; UI 관련 총괄.           UI의 모든 기능을 담당합니다.
    - SoundManage.cs    ; Sound 관련 총괄.        Sound의 모든 기능을 담당합니다.
    - LevelManage.cs    ; Level Data 관련 총괄.   클리어 판정, 점수 관련 기능을 담당합니다.

    레벨 데이터 관리:
    - LevelDataList.cs  ; 아래 모든 레벨 데이터들을 Dictionary로 관리합니다.
    - LevelData.cs      ; 각 레벨의 데이터를 저장하는 클래스입니다.
    - LevelRoomSize.cs  ; 각 레벨의 카메라 이동 제한 범위를 저장하는 클래스입니다.

    씬 관리:
    - SceneList.cs      ; 씬의 이름을 상수로 관리합니다.

    리소스 관리:
    - Sprites.cs        ; 게임에 사용되는 스프라이트 이미지를 미리 불러와 관리합니다.
    - BirdPrefs.cs      ; 게임에 사용되는 새 프리팹을 미리 불러옵니다.

    카메라 움직임 담당:
    - CameraFollowBird.cs   ; 카메라가 새를 따라다니는 기능을 담당합니다.
    - MoveCameraByDrag.cs   ; 드래그로 카메라를 이동시키는 기능을 담당합니다.

    충돌 감지를 담당:
    - ColliderDetection.cs  ; 새 이외의 충돌을 감지하는 기본 클래스입니다. (부모 클래스)
    - Blocks.cs             ; 블록의 충돌을 감지하는 기본 클래스입니다. (ColliderDetection을 상속받습니다.)
    - StoneBlock.cs         ; 돌 블록의 충돌을 감지하는 클래스입니다. (Blocks를 상속받습니다.)
    - WoodBlock.cs          ; 나무 블록의 충돌을 감지하는 클래스입니다. (Blocks를 상속받습니다.)

    발사대 및 새 담당:
    - Slingshot.cs      ; 새를 발사하는 기능을 담당합니다.
    - Bird.cs           ; 새의 기본 클래스입니다.
    - Bird_Blue.cs      ; 파란 새를 구현합니다. (Bird를 상속받습니다.)
    - Bird_Yellow.cs    ; 노란 새를 구현합니다. (Bird를 상속받습니다.)

    중력장 담당:
    - IGraivtyField.cs          ; 중력장을 구현하는 인터페이스입니다.
    - GravityField.cs           ; 중력장을 구현하는 기본 클래스입니다. (IGravityField를 상속받습니다.)
    - CircularGravityField.cs   ; 원형 중력장을 구현하는 클래스입니다. (GravityField를 상속받습니다.)
    - GravityTarget.cs          ; 중력을 적용할 오브젝트의 설정을 담당합니다.
    - GravityFriction.cs        ; 중력을 받는 오브젝트의 마찰력을 설정하는 클래스입니다.

    중력장 및 행성 반지름 설정 담당:
    - GravityFieldRadius.cs                 ; 중력장의 반지름을 설정하는 클래스입니다.
    - GravityFieldRadiusMatch.cs (Editor)   ; 중력장의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스입니다.
    - SurfaceRadius.cs                      ; 행성의 반지름을 설정하는 클래스입니다.
    - SurfaceRadiusMatch.cs (Editor)        ; 행성의 반지름이 변경되었을 때 자동으로 갱신해주는 클래스입니다.






수정본
    관리 클래스:
    - GameManage.cs
    - SceneManage.cs
    - UIManage.cs
    - SoundManage.cs
    - LevelManage.cs

    레벨 데이터 관리:
    - LevelDataList.cs
    - LevelData.cs
    - LevelRoomSize.cs

    씬 관리:
    - SceneList.cs

    리소스 관리:
    - Sprites.cs
    - BirdPrefs.cs

    카메라 움직임 담당:
    - CameraFollowBird.cs
    - MoveCameraByDrag.cs

    충돌 감지를 담당:
    - ColliderDetection.cs
    - Blocks.cs
    - StoneBlock.cs
    - WoodBlock.cs

    발사대 및 새 담당:
    - Slingshot.cs
    - Bird.cs
    - Bird_Blue.cs
    - Bird_Yellow.cs

    중력장 담당:
    - IGraivtyField.cs
    - GravityField.cs
    - CircularGravityField.cs
    - GravityTarget.cs
    - GravityFriction.cs

    중력장 및 행성 반지름 설정 담당:
    - GravityFieldRadius.cs
    - GravityFieldRadiusMatch.cs (Editor)
    - SurfaceRadius.cs
    - SurfaceRadiusMatch.cs (Editor)

intro
    안녕하세요, 저희는 Angry Bird Space 모작 프로젝트를 진행한 [발표자들 이름]입니다.
    오늘 발표에서는 Angry Bird Space 모작을 구현하면서 사용된 기술적 요소들을 중심으로 소개해 드리겠습니다.
    저희 팀이 이 프로젝트에서 어떤 방식으로 게임의 물리적 요소와 캐릭터 움직임을 구현했는지, 그리고 그 과정에서 얻은 기술적 경험을 차례로 설명드리겠습니다.
    프로젝트 발표를 시작하겠습니다.

목차
    이번 발표는 다음 네 가지 주제로 진행하겠습니다.
    먼저 프로젝트 개요에서는 Angry Bird Space 모작 프로젝트의 목표와 이 프로젝트를 선택한 이유를 간단히 설명드리겠습니다.
    다음으로 개발 과정에서는 저희 팀이 게임을 만들기 위해 거친 주요 단계들과 작업 과정을 설명드리겠습니다.
    세 번째로 주요 기능 파트에서는 이번 프로젝트의 핵심 기능을 소개합니다. 여기서는 기능의 개요와 기능별 상세 설명을 드리고, 기능 구현 중 겪었던 도전과 문제 해결 과정도 설명드리겠습니다.
    마지막으로 마무리에서는 이번 프로젝트를 통해 얻은 성과와 교훈을 간단히 정리하며 발표를 마치겠습니다.

    이제 첫 번째 주제인 프로젝트 개요부터 시작하겠습니다.

프로젝트 개요
    이번 발표에서 다룰 첫 번째 주제는 프로젝트 개요입니다.
    저희가 만든 게임은 Angry Bird Space로, 퍼즐 비디오 게임이자 캐주얼 게임 장르에 속합니다.
    이 게임은 단순한 캐주얼 게임으로 보일 수 있지만, 물리적인 요소와 캐릭터 움직임, 그리고 충돌 시스템 등 다양한 기술이 포함된 게임입니다.
    개발 일정은 9월 13일부터 10월 25일까지로 약 한 달간의 기간 동안 게임을 구현하였으며, 이 기간 동안 다양한 기능을 구현하고 여러 기술적인 문제를 해결해 나갔습니다.

    이번에는 저희가 모작한 게임의 제목과 원작에 대해 간단히 소개해드리겠습니다.
    저희가 모작한 게임의 제목은 Angry Bird Space입니다. 이 게임은 우주를 배경으로 한 액션 게임으로, 플레이어가 새를 날려 돼지를 터뜨리는 기본적인 게임 플레이 방식을 가지고 있습니다. 원작은 물리 기반의 퍼즐 게임으로, 각 레벨에서 제공되는 다양한 장애물과 돼지들을 넘기 위해 플레이어는 새의 발사 각도와 힘을 조절하여 목표를 달성합니다.

    저희가 Angry Bird Space를 선택한 이유는 게임의 독특한 게임 플레이 요소에 매력을 느꼈기 때문입니다. 특히 원형 중력장이 인상 깊었는데, 이는 일반적인 2D 물리 엔진을 넘어서 중력장이 추가된 우주 공간 속에서 오브젝트의 움직임을 구현하는 독특한 방식입니다. 이와 같은 다양한 중력 조건에서 오브젝트가 어떻게 움직이는지를 구현하는 데 도전하고 싶어서 이 게임을 선택하게 되었습니다.
    더 나아가, 블랙홀, 화이트홀과 같은 다양한 중력장을 추가하여 게임에 새로운 요소를 더하고 싶었습니다. 이러한 중력장의 변화를 게임에 적용할 수 있다면, 플레이어에게 더 많은 도전과 재미를 줄 수 있을 것이라고 생각합니다.

    게임 제목 및 원작 소개
    이번 발표에서 다룰 첫 번째 주제는 게임 제목과 원작 소개입니다.
    저희가 모작한 게임은 Angry Bird Space입니다. 이 게임은 우주를 배경으로 한 액션 게임으로, 플레이어가 새를 날려 돼지를 터뜨리는 기본적인 게임 방식이 특징입니다. 원작은 물리 기반의 퍼즐 게임으로, 각 레벨에서 다양한 장애물과 돼지들을 넘기 위해 새의 발사 각도와 힘을 조절하여 목표를 달성하는 방식입니다. Angry Bird Space는 원작의 중력을 게임 내 중요한 요소로 삼아, 플레이어에게 재미를 제공합니다.

    프로젝트 개요
    이제 모작한 게임을 바탕으로 저희가 만든 게임에 대해 설명드리겠습니다.
    저희가 만든 게임도 Angry Bird Space를 모티브로 하여 퍼즐 비디오 게임이자 캐주얼 게임 장르에 속합니다. 이 게임은 겉보기엔 단순한 캐주얼 게임처럼 보일 수 있지만, 실제로는 물리적인 요소, 캐릭터 움직임, 충돌 시스템 등 여러 기술적 요소들이 결합된 게임입니다.
    개발 일정은 9월 13일부터 10월 25일까지였으며, 약 한 달 간의 기간 동안 게임을 구현했습니다. 이 기간 동안 여러 기술적인 문제를 해결해 가면서 프로젝트를 진행할 수 있었습니다
    
    모작의 목적
    저희가 Angry Bird Space를 선택한 이유는 게임의 독특한 게임 플레이 요소인 원형 중력장에 큰 매력을 느꼈기 때문입니다. 일반적인 2D 물리 엔진을 넘어서, 중력장이 추가된 우주 공간에서 오브젝트의 움직임이 매우 인상적이었고, 저희는 이런 다양한 중력 조건에서 오브젝트가 어떻게 움직이는지를 직접 구현해 보고 싶었습니다.
    또한, 블랙홀이나 화이트홀과 같은 다양한 중력장을 추가하여 게임에 새로운 요소를 더하고 싶습니다. 이렇게 중력장의 변화를 추가하면 플레이어에게 더 많은 재미를 줄 수 있을 것이라고 생각합니다.

    개발과정
    이번 슬라이드에서는 저희가 게임 개발에 사용한 엔진과 툴에 대해 간단히 소개하겠습니다.
    저희는 게임 개발에 Unity 엔진과 VSCode를 사용했습니다. Unity는 게임의 물리 엔진과 게임 오브젝트의 상호작용을 구현하는 데 사용되었고, VSCode는 C# 스크립트를 작성하는데 사용되었습니다.

    각 팀원의 역할 및 기여도
    이번에는 각 팀원의 역할과 기여도에 대해 설명드리겠습니다.    
    박성순은 프로젝트에서 주로 게임의 물리 시스템과 충돌 처리를 담당했습니다. 또한, 중력장과 관련된 시스템을 구현하고, 게임의 핵심 로직을 다루는 데 중요한 역할을 했습니다. 이 외에도, 게임의 디버깅과 테스트를 통해 버그를 수정하고, 전반적인 게임의 완성도를 높이는 데 기여했습니다.
    유안나는 게임의 전반적인 기획과 레벨 디자인을 맡았고, 각 레벨에 맞는 물리적 환경을 설정하는 작업을 주도했습니다. 또한, 게임 인터페이스와 같은 UI/UX 부분도 담당하며, 게임의 사용자 경험을 개선하는 데 중요한 역할을 했습니다. 이 외에도, 게임의 효과음 처리 등 다양한 부분에서 기여하며 프로젝트의 전반적인 완성도를 높였습니다.

    개발과정 및 협업과정
    다음은 개발과정과 협업과정에 대해 설명드리겠습니다.
    첫 번째 단계는 기획단계였습니다. 여기서 저희는 주제 선정과 역할 분담을 통해 프로젝트의 큰 틀을 잡았습니다. 게임의 기본적인 기능 정의를 하고, 효율적으로 프로젝트를 진행할 수 있도록 했습니다. 주제 선정과 역할 분담을 통해 각자의 책임을 명확히 하고, 개발 초기에 방향성을 확립할 수 있었습니다.
    두 번째 단계는 개발 단계였습니다. 개발 과정에서는 Git을 활용해 분기 관리를 체계적으로 진행했습니다. 각 팀원은 자신이 맡은 기능을 별도의 분기로 작업하며, 나중에 박파일럿이 분기 통합을 통해 작업물을 합쳤습니다. Git을 활용한 분기 관리 덕분에 각자의 작업이 서로 간섭하지 않고 독립적으로 진행될 수 있었습니다.
    마지막으로, 통합 및 테스트 단계에서는 분리된 씬 작업을 담당한 후, 각 씬을 통합하여 하나의 완성된 게임으로 만드는 작업을 진행했습니다. 각 팀원이 맡은 씬을 통합하고, 전체적인 게임 흐름과 기능이 잘 작동하는지 테스트하며, 오류나 버그를 수정했습니다. 이 과정을 통해 최종적으로 게임을 완성할 수 있었습니다.
    이렇게 기획부터 개발, 통합까지의 과정에서 체계적인 협업을 통해 프로젝트를 성공적으로 진행할 수 있었습니다.

개발과정
주요 기능
	- 기능 개요
	- 기능별 설명
	- 도전 과정
마치며 / 프로젝트 리뷰 / 프로젝트 성과와 교훈





◆ 마치며 ◆
    [프로젝트에서 배운점 '이자 장점인']
    이번 프로젝트를 통해 협업의 중요성을 실감할 수 있었습니다. 
    팀원과 의견을 나누고 조율하며 문제를 해결하는 과정에서 협업이 얼마나 중요한지 깨닫게 되었고, (어떤거쓸지고민중)을 하나씩 마무리해 나가면서 내가 맡은 역할에 대한 책임감을 느끼게 되었습니다. 또한, 함께 목표를 향해 나아가는 과정이 매우 의미 있었습니다.
    ;==>
    캐릭터 움직임과 물리 계산 등 게임 개발의 다양한 요소들을 구현하면서 게임 개발에 대한 이해도가 향상되었습니다.
    // 각 부분을 구현하고 조정하는 과정에서 전반적인 개발에 대한 감각을 더 잘 익힐 수 있었습니다.
    ;==>
    마지막으로, 예상치 못한 오류와 여러 난관을 해결하는 과정에서 문제를 분석하고 해결하는 능력도 성장할 수 있었습니다.
    팀원들 간 의견 교환을 통해 문제를 여러 시각에서 접근할 수 있었고 각자의 경험과 지식을 공유하며 문제를 더 효과적으로 해결할 수 있었습니다.
    
    물론 프로젝트를 진행하는 동안 몇 가지 문제점도 있었습니다.
    사람마다 스타일이나 생각이 달라 작은 의견차이가 발생하기도 했습니다. 하지만 그럴 때마다 서로의 생각을 존중하고 대화를 통해 해결하거나 적절히 조율했습니다.
    댜른 문제점으로는 객관적인 평가가 부족했다고 느꼈습니다. 팀원이 두명이다보니 서로 피드백을 주고받다보면 현재 방향이 올바른지 혹은 개선이 필요한지를 판단하는 데 어려움이 있었습니다.

    #개인장점
    변수명이나 메서드명 등 세부적인 코드 작성 방식에 있어서 본인의 기준과 스타일에 따라 자유롭게 설정 가능하다는 점입니다.
    하지만, 개인으로 하다보니 스스로 동기부여를 유지하는데 어려움이 있었고 , 그로 인해 일정관리에 곤란함을 겪기도 했습니다. 또한 기술적 한계에 부딪힐때는 방향을 방향을 잃기도 했었습니다.
